#!/usr/bin/env python
from __future__ import print_function
import os
import imp
import sys
import argparse
import logging

from zag import Sequence
from zag.predicate import *
from zag.graph import Graph

def build_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("workflow",
        help="Workflow file to use")

    parser.add_argument("--log-file",
        dest="logFile", 
        help="If provided, logs to the provided file")

    subparsers = parser.add_subparsers(dest="command")
    run = subparsers.add_parser("run", help="Runs workflow")

    run.add_argument("--stage",
        nargs="+",
        help="Run the specific stages")

    run.add_argument("--tags",
        nargs="+",
        help="Run the tags specified")

    run.add_argument("--exclude-tags",
        dest='excludeTags',
        nargs="+",
        help="Excludes the tag from running")

    run.add_argument("--set",
        nargs="+",
        type=lambda x: x.split('=', 1),
        help="Provide a `Key=Value` to override the setting `Key` in the config")

    p = subparsers.add_parser("list", help="List Stages")

    p.add_argument("--stages",
        action="store_true",
        help="Lists stages")

    p.add_argument("--tags",
        action="store_true",
        help="Lists all tags")

    p = subparsers.add_parser("visualize", help="Emits a dot file showing workflows")
    p = subparsers.add_parser("info", help="Returns information about the requested stage")
    p.add_argument("stage",
        help="Name of the stage to return info about")

    return parser

def setupLogging(fn=None, sout=sys.stdout, loglevel=logging.INFO):
    # To a file and to stdout
    fmt = "%(asctime)s %(name)s %(levelname)s - %(message)s"

    kwargs = dict(format=fmt, level=loglevel)
    if fn is not None:
        kwargs['filename'] = fn

    logging.basicConfig(**kwargs)
    if sout is not None:
        logging.root.addHandler(logging.StreamHandler(sout))

def build_predicate(args):
    p = []
    if args.tags is not None:
        p.append(AllTags(set(args.tags)))

    if args.excludeTags is not None:
        p.append(Not(AnyTags(args.excludeTags)))

    if args.stage is not None:
        p.append(StageNames(args.stage))

    if len(p) == 0:
        return All()

    if len(p) == 1:
        return p[0]

    return And(p)

def build_config(args):
    settings = {
        "PATH": os.path.dirname(os.path.abspath(args.workflow))
    }
    if getattr(args, 'set', None) is not None:
        for k, v in args.set:
            settings[k] = v

    return settings

def run(args, workflow):
    graph = Graph()
    stages = {}
    config = build_config(args)
    for workflow in workflow.workflows:
        workflow = workflow.derive_config(config)
        for stage in workflow.resolve_stages():
            stages[stage.name] = stage
            graph.add_node(stage.name)
            for inbound in stage.depends_on:
                graph.add_edge(inbound, stage.name)

    predicate = build_predicate(args)
    stages_to_run = []
    for name in graph.toposort():
        stage = stages[name]
        if predicate.evaluate(stage):
            logging.info("+ `%s`", stage.name)
            stages_to_run.append(stage)
        else:
            logging.info("- `%s`", stage.name)

    for stage in stages_to_run:
        logging.info("Running stage %s", stage.name)
        stage.run()

def list_cmd(args, workflow):
    names = set()
    tags = set()
    for workflow in workflow.workflows:
        workflow = workflow.derive_config({}, False)
        for stage in workflow.resolve_stages():
            names.add(stage.name)
            tags.update(stage.tags)

    if args.stages:
        print("Stages")
        print("------")
        for name in sorted(names):
            print(" -", name)

        print()

    if args.tags:
        print("Tags")
        print("------")
        for tag in sorted(tags):
            print(" -", tag)

def vis_cmd(args, workflow):
    print("digraph workflow {")
    config = build_config(args)
    names = {}
    for workflow in workflow.workflows:
        workflow = workflow.derive_config(config)
        for stage in workflow.resolve_stages():
            names[stage.name] = len(names)
            print('{} [label="{}"]'.format(names[stage.name], stage.name))
            for inbound in stage.depends_on:
                print("{} -> {}".format(names[inbound], names[stage.name]))

    print("}")

def info_cmd(args, workflow):
    for workflow in workflow.workflows:
        workflow = workflow.derive_config(build_config(args))
        for stage in workflow.resolve_stages():
            if stage.name == args.stage:
                print("Name:", stage.name)
                print("Task:", unicode(stage.task))
                print("Args:")
                for arg in stage.args:
                    print("  `{}`".format(' '.join(arg)))

                print()
                deps = ('`{}`'.format(d) for d in stage.depends_on)
                print("Depends on: ", ' '.join(deps))
                print("Tags: ", ' '.join(stage.tags))

def main(args):
    setupLogging(args.logFile)
    workflow = imp.load_source('workflow', args.workflow)

    if args.command == 'run':
        run(args, workflow)
    if args.command == 'list':
        list_cmd(args, workflow)
    if args.command == 'visualize':
        vis_cmd(args, workflow)
    if args.command == 'info':
        info_cmd(args, workflow)
    
if __name__ == '__main__':
    main(build_parser().parse_args())
